3)  Consider the code for the Link, Stack and Queue classes.  Note Stack and Queue are not complete.

---------------------------------------------------------------
public class Link{
  Object thing;
  Link next;
}
---------------------------------------------------------------


----------------------------------------------------------------
public class Stack{
  Link head;
  int length=0;
  
  public Stack(Link first){
    head=first;
    length=1;}
  
  public void push(Link newlink){
    newlink.next=head;
    head=newlink;}
    length=length+1;}
    
   public Link peek(Link newlink){
    return head;}
   //part B below 
  
  public Link pop(Link newlink){
    Link target = head;
    head.next = head;
    length=length-1;
    return target;}
  
--------------------------------------------------------------
  
----------------------------------------------------------------
public class Queue{
  Link head;
  int length=0;
 
  public Queue(Link first){
    head=first;
    length=1;} 
    
  public void add(Link newlink){
    newlink.next=head;
    head=newlink;} //slight error here, there should not be a curly bracket here...
    length=length+1;}
    
  //part D below
  public Link peek(Link target){
    return target;}
  
  public void remove(Link target){
    target.next=head;
    target=null;
  
    
  
--------------------------------------------------------------

a)  Explain what a Stack is.  Specify if it is LIFO or FIFO.
A stack is a linear data structure, which can be rationalized as a vertical 'stack' of data pieces. It follows the LIFO pattern of addition/removal.
b)  Complete the Stack class by writing the "pop" method.
Done. Point in code commented.
c)  Explain what a Queue is.  Specify if it is LIFO or FIFO.
A queue is a linear data structure, which can be rationalized as a horizontal 'queue' of data pieces. It follows the FIFO pattern of addition/removal.
d)  Complete the Queue class by writing the "peek" and "remove" methods.
Done. Point in code commented.
